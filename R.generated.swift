//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `Action 1.png`.
    static let action1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Action 1", pathExtension: "png")
    /// Resource file `Action 2.png`.
    static let action2Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Action 2", pathExtension: "png")
    /// Resource file `Action 3-1@2x.png`.
    static let action312xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Action 3-1@2x", pathExtension: "png")
    /// Resource file `Action 3-1@3x.png`.
    static let action313xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Action 3-1@3x", pathExtension: "png")
    /// Resource file `Chevron.png`.
    static let chevronPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Chevron", pathExtension: "png")
    
    /// `bundle.url(forResource: "Action 1", withExtension: "png")`
    static func action1Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.action1Png
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Action 2", withExtension: "png")`
    static func action2Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.action2Png
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Action 3-1@2x", withExtension: "png")`
    static func action312xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.action312xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Action 3-1@3x", withExtension: "png")`
    static func action313xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.action313xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Chevron", withExtension: "png")`
    static func chevronPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chevronPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `Action 1`.
    static let action1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Action 1")
    /// Image `Action 2`.
    static let action2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Action 2")
    /// Image `Action 3-1`.
    static let action31 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Action 3-1")
    /// Image `Chevron`.
    static let chevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chevron")
    
    /// `UIImage(named: "Action 1", bundle: ..., traitCollection: ...)`
    static func action1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.action1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Action 2", bundle: ..., traitCollection: ...)`
    static func action2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.action2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Action 3-1", bundle: ..., traitCollection: ...)`
    static func action31(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.action31, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Chevron", bundle: ..., traitCollection: ...)`
    static func chevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevron, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `FooterView`.
    static let footerView = _R.nib._FooterView()
    /// Nib `searchField`.
    static let searchField = _R.nib._searchField()
    
    /// `UINib(name: "FooterView", in: bundle)`
    static func footerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerView)
    }
    
    /// `UINib(name: "searchField", in: bundle)`
    static func searchField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchField)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `TopViewController`, and contains static references to 1 segues.
    struct topViewController {
      /// Segue identifier `ToWebView`.
      static let toWebView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TopViewController, WebViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ToWebView")
      
      /// Optionally returns a typed version of segue `ToWebView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toWebView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TopViewController, WebViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.topViewController.toWebView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _FooterView.validate()
    }
    
    struct _FooterView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Action 3-1.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Action 3-1.png' is used in nib 'FooterView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _searchField: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "searchField"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = TopViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
